#!/usr/bin/env node

const fs = require('fs');
const https = require('https');
const _ = require('lodash');
const path = require('path');


require('dotenv').config({path: path.resolve(__dirname, '../.env')});

const models = require('../models');
const helpers = require('../routes/helpers');

function download(url, filename) {
  const promise = new Promise(function(resolve, reject) {
    const file = fs.createWriteStream(filename);
    const request = https.get(url, function(response) {
      response.on('end', function() {
        resolve();
      });
      response.pipe(file);
    });
  });
  return promise;
}

const ADDRESS_RE = /(\d+) (.+)/i;

async function extract() {
  console.log('Downloading latest buyouts data...');
  let records;
  let offset = 0;
  const limit = 50000;
  do {
    const buyoutsPath = path.resolve(__dirname, `../tmp/buyouts_${offset}.json`);
    await download(`https://data.sfgov.org/resource/wmam-7g8d.json?$order=case_number&$offset=${offset}&$limit=${limit}`, buyoutsPath);
    records = JSON.parse(fs.readFileSync(buyoutsPath, 'utf8'));
    for (let buyout of records) {
      process.stdout.write('.')
      const case_number = buyout.case_number;
      const [record, created] = await models.Buyout.findOrCreate({where: {case_number}, defaults: {case_number}});
      const address = buyout.block_address;
      if (address) {
        const match = ADDRESS_RE.exec(address);
        buyout.street_num = parseInt(match[1]);
        buyout.street_address = match[2];
      }
      await record.update(buyout);
    }
    offset += records.length;
  } while (records.length > 0);
  console.log('!');
}

extract()
  .then(function() {
    console.log('Done!');
    process.exit(0);
  });
